#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sensor_msgs/JointState.h>

// added from ahl_robot/test
#include "ahl_robot/robot/parser.hpp"

using namespace ahl_robot;


// end of the testing section

ros::Publisher pub_joints_base;
ros::Publisher pub_joints_arm;



// sensor_msgs::JointState new_state_arm;
// sensor_msgs::JointState new_state_base;

void chatterCallback(const sensor_msgs::JointState::ConstPtr& msg)
{

  if (strncmp(msg->name[0].c_str(), "arm", 3) == 0) {
    pub_joints_arm.publish(msg);
  } 
  else {
    if (strncmp(msg->name[0].c_str(), "wheel", 4) == 0){
      pub_joints_base.publish(msg);
    }
  } 

  robot->computeJacobian(mnp_name);
  ROS_INFO(robot->getJacobian(mnp_name));

}

void parseForce(const sensor_msgs::JointState::ConstPtr& msg)
{
  // parse the force at the end-effector from the effort message
}

int main(int argc, char **argv)
{
  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line.
   * For programmatic remappings you can use a different version of init() which takes
   * remappings directly, but for most command-line programs, passing argc and argv is
   * the easiest way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "youbot_torq_measure_node");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  /**
   * The subscribe() call is how you tell ROS that you want to receive messages
   * on a given topic.  This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing.  Messages are passed to a callback function, here
   * called chatterCallback.  subscribe() returns a Subscriber object that you
   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber
   * object go out of scope, this callback will automatically be unsubscribed from
   * this topic.
   *
   * The second parameter to the subscribe() function is the size of the message
   * queue.  If messages are arriving faster than they are being processed, this
   * is the number of messages that will be buffered up before beginning to throw
   * away the oldest ones.
   */
  pub_joints_base = n.advertise<sensor_msgs::JointState>("youbot_base_states", 1);
  pub_joints_arm = n.advertise<sensor_msgs::JointState>("youbot_arm_states", 1);

  ros::Subscriber sub = n.subscribe("/joint_states", 1000, chatterCallback);

    std::string name = "youbot";
	RobotPtr robot = std::make_shared<Robot>(name);

	ParserPtr parser = std::make_shared<Parser>();
	std::string path = "/home/daichi/Work/catkin_ws/src/ahl_ros_pkg/ahl_robot/ahl_robot/yaml/youbot.yaml";
	parser->load(path, robot);

	const std::string mnp_name = "mnp";



  /**
   * ros::spin() will enter a loop, pumping callbacks.  With this version, all
   * callbacks will be called from within this thread (the main one).  ros::spin()
   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.
   */
  ros::spin();

  return 0;
}